/*++

Copyright (c) 2017, Matthieu Suiche

Module Name:
    Debug.cpp

Abstract:
    Porosity.

Author:
    Matthieu Suiche (m) Feb-2017

Revision History:

--*/
#include "Porosity.h"

// 60606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680635c19a95c1461005c578063609ff1bd146100925780639e7b8d61146100be578063b3f98adc146100f4575bfe5b341561006457fe5b610090600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610117565b005b341561009a57fe5b6100a261046f565b604051808260ff1660ff16815260200191505060405180910390f35b34156100c657fe5b6100f2600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506104f9565b005b34156100fc57fe5b610115600480803560ff169060200190919050506105f8565b005b60006000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160010160009054906101000a900460ff16156101785761046a565b5b600073ffffffffffffffffffffffffffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156102a657503373ffffffffffffffffffffffffffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1561031557600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250610179565b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561034e5761046a565b60018260010160006101000a81548160ff021916908315150217905550828260010160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff161561045257816000015460028260010160019054906101000a900460ff1660ff1681548110151561042e57fe5b906000526020600020900160005b5060000160008282540192505081905550610469565b816000015481600001600082825401925050819055505b5b505050565b60006000600060009150600090505b6002805490508160ff1610156104f3578160028260ff168154811015156104a157fe5b906000526020600020900160005b506000015411156104e55760028160ff168154811015156104cc57fe5b906000526020600020900160005b506000015491508092505b5b808060010191505061047e565b5b505090565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415806105a25750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff165b156105ac576105f5565b6001600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055505b50565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff168061066057506002805490508260ff1610155b1561066a576106db565b60018160010160006101000a81548160ff021916908315150217905550818160010160016101000a81548160ff021916908360ff160217905550806000015460028360ff168154811015156106bb57fe5b906000526020600020900160005b50600001600082825401925050819055505b50505600a165627a7a72305820768ed1974ce7fcc91b0b8849d77c9364afd0f5fa294432f588c89271bd2704970029
bytes ballot = { 
    0x60, 0x60, 0x60, 0x40, 0x52, 0x60, 0x00, 0x35, 0x7c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x04, 0x63, 0xff, 0xff, 0xff, 0xff, 0x16, 0x80, 0x63, 0x5c, 0x19, 0xa9, 0x5c, 0x14, 0x61, 0x00, 0x5c, 0x57, 0x80, 0x63, 0x60,
    0x9f, 0xf1, 0xbd, 0x14, 0x61, 0x00, 0x92, 0x57, 0x80, 0x63, 0x9e, 0x7b, 0x8d, 0x61, 0x14, 0x61, 0x00, 0xbe, 0x57, 0x80, 0x63, 0xb3, 0xf9, 0x8a, 0xdc, 0x14, 0x61, 0x00, 0xf4, 0x57,
    0x5b, 0xfe, 0x5b, 0x34, 0x15, 0x61, 0x00, 0x64, 0x57, 0xfe, 0x5b, 0x61, 0x00, 0x90, 0x60, 0x04, 0x80, 0x80, 0x35, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x90, 0x60, 0x20, 0x01, 0x90, 0x91, 0x90, 0x50, 0x50, 0x61, 0x01, 0x17, 0x56, 0x5b, 0x00, 0x5b, 0x34, 0x15, 0x61,
    0x00, 0x9a, 0x57, 0xfe, 0x5b, 0x61, 0x00, 0xa2, 0x61, 0x04, 0x6f, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x80, 0x82, 0x60, 0xff, 0x16, 0x60, 0xff, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x91,
    0x50, 0x50, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xf3, 0x5b, 0x34, 0x15, 0x61, 0x00, 0xc6, 0x57, 0xfe, 0x5b, 0x61, 0x00, 0xf2, 0x60, 0x04, 0x80, 0x80, 0x35, 0x73, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x90, 0x60, 0x20, 0x01, 0x90, 0x91, 0x90, 0x50, 0x50, 0x61, 0x04,
    0xf9, 0x56, 0x5b, 0x00, 0x5b, 0x34, 0x15, 0x61, 0x00, 0xfc, 0x57, 0xfe, 0x5b, 0x61, 0x01, 0x15, 0x60, 0x04, 0x80, 0x80, 0x35, 0x60, 0xff, 0x16, 0x90, 0x60, 0x20, 0x01, 0x90, 0x91,
    0x90, 0x50, 0x50, 0x61, 0x05, 0xf8, 0x56, 0x5b, 0x00, 0x5b, 0x60, 0x00, 0x60, 0x00, 0x60, 0x01, 0x60, 0x00, 0x33, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x90, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x00, 0x20, 0x91, 0x50, 0x81, 0x60, 0x01, 0x01, 0x60, 0x00, 0x90, 0x54, 0x90, 0x61, 0x01,
    0x00, 0x0a, 0x90, 0x04, 0x60, 0xff, 0x16, 0x15, 0x61, 0x01, 0x78, 0x57, 0x61, 0x04, 0x6a, 0x56, 0x5b, 0x5b, 0x60, 0x00, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x60, 0x01, 0x60, 0x00, 0x85, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x90, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x00, 0x20, 0x60, 0x01, 0x01, 0x60, 0x02, 0x90, 0x54, 0x90, 0x61, 0x01, 0x00, 0x0a, 0x90, 0x04, 0x73,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x14, 0x15, 0x80, 0x15, 0x61, 0x02, 0xa6, 0x57, 0x50, 0x33, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x60, 0x01, 0x60, 0x00, 0x85, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x90, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x00, 0x20, 0x60, 0x01, 0x01, 0x60, 0x02, 0x90, 0x54, 0x90, 0x61, 0x01, 0x00, 0x0a,
    0x90, 0x04, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x14, 0x15, 0x5b, 0x15, 0x61, 0x03, 0x15, 0x57, 0x60, 0x01, 0x60, 0x00, 0x84, 0x73,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x90, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x00, 0x20, 0x60, 0x01, 0x01,
    0x60, 0x02, 0x90, 0x54, 0x90, 0x61, 0x01, 0x00, 0x0a, 0x90, 0x04, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0x16, 0x92, 0x50, 0x61, 0x01, 0x79, 0x56, 0x5b, 0x33, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0x16, 0x83, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x14, 0x15, 0x61, 0x03,
    0x4e, 0x57, 0x61, 0x04, 0x6a, 0x56, 0x5b, 0x60, 0x01, 0x82, 0x60, 0x01, 0x01, 0x60, 0x00, 0x61, 0x01, 0x00, 0x0a, 0x81, 0x54, 0x81, 0x60, 0xff, 0x02, 0x19, 0x16, 0x90, 0x83, 0x15,
    0x15, 0x02, 0x17, 0x90, 0x55, 0x50, 0x82, 0x82, 0x60, 0x01, 0x01, 0x60, 0x02, 0x61, 0x01, 0x00, 0x0a, 0x81, 0x54, 0x81, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x19, 0x16, 0x90, 0x83, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x02, 0x17, 0x90, 0x55, 0x50, 0x60, 0x01, 0x60, 0x00, 0x84, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x90, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x00, 0x20, 0x90, 0x50, 0x80, 0x60, 0x01, 0x01, 0x60, 0x00, 0x90, 0x54, 0x90, 0x61, 0x01, 0x00,
    0x0a, 0x90, 0x04, 0x60, 0xff, 0x16, 0x15, 0x61, 0x04, 0x52, 0x57, 0x81, 0x60, 0x00, 0x01, 0x54, 0x60, 0x02, 0x82, 0x60, 0x01, 0x01, 0x60, 0x01, 0x90, 0x54, 0x90, 0x61, 0x01, 0x00,
    0x0a, 0x90, 0x04, 0x60, 0xff, 0x16, 0x60, 0xff, 0x16, 0x81, 0x54, 0x81, 0x10, 0x15, 0x15, 0x61, 0x04, 0x2e, 0x57, 0xfe, 0x5b, 0x90, 0x60, 0x00, 0x52, 0x60, 0x20, 0x60, 0x00, 0x20,
    0x90, 0x01, 0x60, 0x00, 0x5b, 0x50, 0x60, 0x00, 0x01, 0x60, 0x00, 0x82, 0x82, 0x54, 0x01, 0x92, 0x50, 0x50, 0x81, 0x90, 0x55, 0x50, 0x61, 0x04, 0x69, 0x56, 0x5b, 0x81, 0x60, 0x00,
    0x01, 0x54, 0x81, 0x60, 0x00, 0x01, 0x60, 0x00, 0x82, 0x82, 0x54, 0x01, 0x92, 0x50, 0x50, 0x81, 0x90, 0x55, 0x50, 0x5b, 0x5b, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x60, 0x00, 0x60, 0x00,
    0x60, 0x00, 0x60, 0x00, 0x91, 0x50, 0x60, 0x00, 0x90, 0x50, 0x5b, 0x60, 0x02, 0x80, 0x54, 0x90, 0x50, 0x81, 0x60, 0xff, 0x16, 0x10, 0x15, 0x61, 0x04, 0xf3, 0x57, 0x81, 0x60, 0x02,
    0x82, 0x60, 0xff, 0x16, 0x81, 0x54, 0x81, 0x10, 0x15, 0x15, 0x61, 0x04, 0xa1, 0x57, 0xfe, 0x5b, 0x90, 0x60, 0x00, 0x52, 0x60, 0x20, 0x60, 0x00, 0x20, 0x90, 0x01, 0x60, 0x00, 0x5b,
    0x50, 0x60, 0x00, 0x01, 0x54, 0x11, 0x15, 0x61, 0x04, 0xe5, 0x57, 0x60, 0x02, 0x81, 0x60, 0xff, 0x16, 0x81, 0x54, 0x81, 0x10, 0x15, 0x15, 0x61, 0x04, 0xcc, 0x57, 0xfe, 0x5b, 0x90,
    0x60, 0x00, 0x52, 0x60, 0x20, 0x60, 0x00, 0x20, 0x90, 0x01, 0x60, 0x00, 0x5b, 0x50, 0x60, 0x00, 0x01, 0x54, 0x91, 0x50, 0x80, 0x92, 0x50, 0x5b, 0x5b, 0x80, 0x80, 0x60, 0x01, 0x01,
    0x91, 0x50, 0x50, 0x61, 0x04, 0x7e, 0x56, 0x5b, 0x5b, 0x50, 0x50, 0x90, 0x56, 0x5b, 0x60, 0x00, 0x60, 0x00, 0x90, 0x54, 0x90, 0x61, 0x01, 0x00, 0x0a, 0x90, 0x04, 0x73, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x33, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x16, 0x14, 0x15, 0x80, 0x61, 0x05, 0xa2, 0x57, 0x50, 0x60, 0x01, 0x60, 0x00, 0x82, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x90, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x00, 0x20, 0x60, 0x01, 0x01, 0x60, 0x00, 0x90, 0x54, 0x90, 0x61, 0x01, 0x00, 0x0a, 0x90, 0x04, 0x60,
    0xff, 0x16, 0x5b, 0x15, 0x61, 0x05, 0xac, 0x57, 0x61, 0x05, 0xf5, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0x00, 0x83, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x90, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x00, 0x20, 0x60, 0x00, 0x01, 0x81, 0x90, 0x55, 0x50, 0x5b, 0x50, 0x56, 0x5b, 0x60,
    0x00, 0x60, 0x01, 0x60, 0x00, 0x33, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x73, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x90, 0x81, 0x52, 0x60, 0x20,
    0x01, 0x60, 0x00, 0x20, 0x90, 0x50, 0x80, 0x60, 0x01, 0x01, 0x60, 0x00, 0x90, 0x54, 0x90, 0x61, 0x01, 0x00, 0x0a, 0x90, 0x04, 0x60, 0xff, 0x16, 0x80, 0x61, 0x06, 0x60, 0x57, 0x50,
    0x60, 0x02, 0x80, 0x54, 0x90, 0x50, 0x82, 0x60, 0xff, 0x16, 0x10, 0x15, 0x5b, 0x15, 0x61, 0x06, 0x6a, 0x57, 0x61, 0x06, 0xdb, 0x56, 0x5b, 0x60, 0x01, 0x81, 0x60, 0x01, 0x01, 0x60,
    0x00, 0x61, 0x01, 0x00, 0x0a, 0x81, 0x54, 0x81, 0x60, 0xff, 0x02, 0x19, 0x16, 0x90, 0x83, 0x15, 0x15, 0x02, 0x17, 0x90, 0x55, 0x50, 0x81, 0x81, 0x60, 0x01, 0x01, 0x60, 0x01, 0x61,
    0x01, 0x00, 0x0a, 0x81, 0x54, 0x81, 0x60, 0xff, 0x02, 0x19, 0x16, 0x90, 0x83, 0x60, 0xff, 0x16, 0x02, 0x17, 0x90, 0x55, 0x50, 0x80, 0x60, 0x00, 0x01, 0x54, 0x60, 0x02, 0x83, 0x60,
    0xff, 0x16, 0x81, 0x54, 0x81, 0x10, 0x15, 0x15, 0x61, 0x06, 0xbb, 0x57, 0xfe, 0x5b, 0x90, 0x60, 0x00, 0x52, 0x60, 0x20, 0x60, 0x00, 0x20, 0x90, 0x01, 0x60, 0x00, 0x5b, 0x50, 0x60,
    0x00, 0x01, 0x60, 0x00, 0x82, 0x82, 0x54, 0x01, 0x92, 0x50, 0x50, 0x81, 0x90, 0x55, 0x50, 0x5b, 0x50, 0x50, 0x56, 0x00, 0xa1, 0x65, 0x62, 0x7a, 0x7a, 0x72, 0x30, 0x58, 0x20, 0x76,
    0x8e, 0xd1, 0x97, 0x4c, 0xe7, 0xfc, 0xc9, 0x1b, 0x0b, 0x88, 0x49, 0xd7, 0x7c, 0x93, 0x64, 0xaf, 0xd0, 0xf5, 0xfa, 0x29, 0x44, 0x32, 0xf5, 0x88, 0xc8, 0x92, 0x71, 0xbd, 0x27, 0x04,
    0x97, 0x00, 0x29 
};

// [{"constant":false,"inputs":[{"name":"to","type":"address"}],"name":"delegate","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"winningProposal","outputs":[{"name":"winningProposal","type":"uint8"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"voter","type":"address"}],"name":"giveRightToVote","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"proposal","type":"uint8"}],"name":"vote","outputs":[],"payable":false,"type":"function"},{"inputs":[{"name":"_numProposals","type":"uint8"}],"payable":false,"type":"constructor"}]
// 5c19a95c delegate(address)
// 9e7b8d61 giveRightToVote(address)
// b3f98adc vote(uint8)
// 609ff1bd winningProposal()

bytes buggedBytesCode = { 0x88, 0xc8, 0x92, 0x71, 0xbd, 0x27, 0x04, 0x97, 0x00, 0x29 };

// simple
// [{"constant":false, "inputs" : [], "name" : "func1", "outputs" : [], "payable" : false, "type" : "function"}, { "constant":false,"inputs" : [],"name" : "func2","outputs" : [],"payable" : false,"type" : "function" }]
// 74135154 func1()
// b1ade4db func2()

bytes SimpleContract2EmptyFunctions = { 0x60, 0x60, 0x60, 0x40, 0x52, 0x60, 0x00, 0x35, 0x7c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x04, 0x63, 0xff, 0xff, 0xff, 0xff, 0x16, 0x80, 0x63, 0x74, 0x13, 0x51, 0x54, 0x14, 0x60, 0x44, 0x57, 0x80, 0x63, 0xb1, 0xad, 0xe4, 0xdb, 0x14, 0x60, 0x53, 0x57, 0x5b, 0xfe, 0x5b, 0x34, 0x15, 0x60, 0x4b, 0x57, 0xfe, 0x5b, 0x60, 0x51, 0x60, 0x62, 0x56, 0x5b, 0x00, 0x5b, 0x34, 0x15, 0x60, 0x5a, 0x57, 0xfe, 0x5b, 0x60, 0x60, 0x60, 0x65, 0x56, 0x5b, 0x00, 0x5b, 0x5b, 0x56, 0x5b, 0x5b, 0x56, 0x00, 0xa1, 0x65, 0x62, 0x7a, 0x7a, 0x72, 0x30, 0x58, 0x20, 0xbc, 0x1a, 0xbc, 0x90, 0x63, 0x57, 0xd6, 0xac, 0x96, 0x1b, 0x6d, 0x6c, 0xca, 0x1e, 0x99, 0x5e, 0x4b, 0xde, 0x06, 0xff, 0xeb, 0x6d, 0x78, 0x18, 0x84, 0x04, 0x24, 0xdf, 0xbc, 0x0f, 0x37, 0xc3, 0x00, 0x29 };
bytes EmptyContract = { 0x60, 0x60, 0x60, 0x40, 0x52, 0x5b, 0xfe, 0x00, 0xa1, 0x65, 0x62, 0x7a, 0x7a, 0x72, 0x30, 0x58, 0x20, 0x59, 0x4d, 0x29, 0xd9, 0x2f, 0xee, 0xe7, 0xee, 0x7d, 0xa1, 0x5d, 0x80, 0x87, 0x6b, 0x61, 0xf4, 0xa6, 0xb0, 0xab, 0x7d, 0xf5, 0x07, 0x20, 0x41, 0xcd, 0xb6, 0xfa, 0xbf, 0xcc, 0xde, 0xd1, 0xc6, 0x00, 0x29 };

bytes SimpleRunTime = { 0x60, 0x60, 0x60, 0x40, 0x52, 0x60, 0x08, 0x56, 0x5b, 0x00 };
bytes SimpleContractBin = { 0x60, 0x60, 0x60, 0x40, 0x52, 0x60, 0x0a, 0x80, 0x60, 0x10, 0x60, 0x00, 0x39, 0x60, 0x00, 0xf3, 0x60, 0x60, 0x60, 0x40, 0x52, 0x60, 0x08, 0x56, 0x5b, 0x00 };

bytes TwoEmptyFunctions = { 0x60, 0x60, 0x60, 0x40, 0x52, 0x60, 0x61, 0x80, 0x60, 0x10, 0x60, 0x00, 0x39, 0x60, 0x00, 0xf3, 0x60, 0x60, 0x60, 0x40, 0x52, 0x60, 0x00, 0x35, 0x7c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x04, 0x80, 0x63, 0x1b, 0x18, 0xf9, 0x52, 0x14, 0x60, 0x41, 0x57, 0x80, 0x63, 0x67, 0x1c, 0x7d, 0x68, 0x14, 0x60, 0x4e, 0x57, 0x60, 0x3f, 0x56, 0x5b, 0x00, 0x5b, 0x60, 0x4c, 0x60, 0x04, 0x80, 0x50, 0x50, 0x60, 0x5b, 0x56, 0x5b, 0x00, 0x5b, 0x60, 0x59, 0x60, 0x04, 0x80, 0x50, 0x50, 0x60, 0x5e, 0x56, 0x5b, 0x00, 0x5b, 0x5b, 0x56, 0x5b, 0x5b, 0x56 };
bytes TwoEmptyFunctionsRuntime = { 0x60, 0x60, 0x60, 0x40, 0x52, 0x60, 0x00, 0x35, 0x7c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x04, 0x80, 0x63, 0x1b, 0x18, 0xf9, 0x52, 0x14, 0x60, 0x41, 0x57, 0x80, 0x63, 0x67, 0x1c, 0x7d, 0x68, 0x14, 0x60, 0x4e, 0x57, 0x60, 0x3f, 0x56, 0x5b, 0x00, 0x5b, 0x60, 0x4c, 0x60, 0x04, 0x80, 0x50, 0x50, 0x60, 0x5b, 0x56, 0x5b, 0x00, 0x5b, 0x60, 0x59, 0x60, 0x04, 0x80, 0x50, 0x50, 0x60, 0x5e, 0x56, 0x5b, 0x00, 0x5b, 0x5b, 0x56, 0x5b, 0x5b, 0x56 };

bytes InitBlockFunctions = { 0x60, 0x60, 0x60, 0x40, 0x52, 0x60, 0x61, 0x80, 0x60, 0x10, 0x60, 0x00, 0x39, 0x60, 0x00, 0xf3 };

bytes OneEmptyFunctionRunTime = { 0x60, 0x60, 0x60, 0x40, 0x52, 0x60, 0x00, 0x35, 0x7c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x04, 0x80, 0x63, 0x1b, 0x18, 0xf9, 0x52, 0x14, 0x60, 0x37, 0x57, 0x60, 0x35, 0x56, 0x5b, 0x00, 0x5b, 0x60, 0x42, 0x60, 0x04, 0x80, 0x50, 0x50, 0x60, 0x44, 0x56, 0x5b, 0x00, 0x5b, 0x5b, 0x56 };

/*
Function signatures:
eee97206: double(uint256)
f40a049d: triple(uint256)
Contract JSON ABI
[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"double","outputs":[{"name":"","type":"uint256"}],"ty
pe":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"triple","outputs":[{"name":"","type":
"uint256"}],"type":"function"}]
*/
bytes ThreeFuncMath = { 0x60, 0x60, 0x60, 0x40, 0x52, 0x60, 0xe0, 0x60, 0x02, 0x0a, 0x60, 0x00, 0x35, 0x04, 0x63, 0xee, 0xe9, 0x72, 0x06, 0x81, 0x14, 0x60, 0x24, 0x57, 0x80, 0x63, 0xf4, 0x0a, 0x04, 0x9d, 0x14, 0x60, 0x35, 0x57, 0x5b, 0x00, 0x5b, 0x60, 0x45, 0x60, 0x04, 0x35, 0x60, 0x00, 0x60, 0x4f, 0x82, 0x60, 0x02, 0x5b, 0x02, 0x90, 0x56, 0x5b, 0x60, 0x45, 0x60, 0x04, 0x35, 0x60, 0x00, 0x60, 0x4f, 0x82, 0x60, 0x03, 0x60, 0x31, 0x56, 0x5b, 0x60, 0x60, 0x90, 0x81, 0x52, 0x60, 0x20, 0x90, 0xf3, 0x5b, 0x92, 0x91, 0x50, 0x50, 0x56 };
bytes Data = { 0xee, 0xe9, 0x72, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 };

bytes VulnerableContract = { 0x60, 0x60, 0x60, 0x40, 0x52, 0x60, 0x00, 0x35, 0x7c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x04, 0x80, 0x63, 0x5f, 0xd8, 0xc7, 0x10, 0x14, 0x61, 0x00, 0x4f, 0x57, 0x80, 0x63, 0xc0, 0xe3, 0x17, 0xfb, 0x14, 0x61, 0x00, 0x5e, 0x57, 0x80, 0x63, 0xf8, 0xb2, 0xcb, 0x4f, 0x14, 0x61, 0x00, 0x6d, 0x57, 0x61, 0x00, 0x4d, 0x56, 0x5b, 0x00, 0x5b, 0x61, 0x00, 0x5c, 0x60, 0x04, 0x80, 0x50, 0x50, 0x61, 0x00, 0x99, 0x56, 0x5b, 0x00, 0x5b, 0x61, 0x00, 0x6b, 0x60, 0x04, 0x80, 0x50, 0x50, 0x61, 0x01, 0x3e, 0x56, 0x5b, 0x00, 0x5b, 0x61, 0x00, 0x83, 0x60, 0x04, 0x80, 0x80, 0x35, 0x90, 0x60, 0x20, 0x01, 0x90, 0x91, 0x90, 0x50, 0x50, 0x61, 0x01, 0x7d, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x80, 0x82, 0x81, 0x52, 0x60, 0x20, 0x01, 0x91, 0x50, 0x50, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xf3, 0x5b, 0x33, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x60, 0x00, 0x60, 0x00, 0x50, 0x60, 0x00, 0x33, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x90, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x00, 0x20, 0x60, 0x00, 0x50, 0x54, 0x60, 0x40, 0x51, 0x80, 0x90, 0x50, 0x60, 0x00, 0x60, 0x40, 0x51, 0x80, 0x83, 0x03, 0x81, 0x85, 0x87, 0x61, 0x85, 0x02, 0x5a, 0x03, 0xf1, 0x92, 0x50, 0x50, 0x50, 0x15, 0x15, 0x61, 0x01, 0x06, 0x57, 0x61, 0x00, 0x02, 0x56, 0x5b, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x50, 0x60, 0x00, 0x33, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x90, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x00, 0x20, 0x60, 0x00, 0x50, 0x81, 0x90, 0x55, 0x50, 0x5b, 0x56, 0x5b, 0x34, 0x60, 0x00, 0x60, 0x00, 0x50, 0x60, 0x00, 0x33, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x90, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x00, 0x20, 0x60, 0x00, 0x82, 0x82, 0x82, 0x50, 0x54, 0x01, 0x92, 0x50, 0x50, 0x81, 0x90, 0x55, 0x50, 0x5b, 0x56, 0x5b, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x50, 0x60, 0x00, 0x83, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x90, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x00, 0x20, 0x60, 0x00, 0x50, 0x54, 0x90, 0x50, 0x61, 0x01, 0xb6, 0x56, 0x5b, 0x91, 0x90, 0x50, 0x56 };
bytes Vulnerable2Gas0x1111 = { 0x60, 0x60, 0x60, 0x40, 0x52, 0x60, 0x00, 0x35, 0x7c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x04, 0x80, 0x63, 0x5f, 0xd8, 0xc7, 0x10, 0x14, 0x61, 0x00, 0x4f, 0x57, 0x80, 0x63, 0xc0, 0xe3, 0x17, 0xfb, 0x14, 0x61, 0x00, 0x5e, 0x57, 0x80, 0x63, 0xf8, 0xb2, 0xcb, 0x4f, 0x14, 0x61, 0x00, 0x6d, 0x57, 0x61, 0x00, 0x4d, 0x56, 0x5b, 0x00, 0x5b, 0x61, 0x00, 0x5c, 0x60, 0x04, 0x80, 0x50, 0x50, 0x61, 0x00, 0x99, 0x56, 0x5b, 0x00, 0x5b, 0x61, 0x00, 0x6b, 0x60, 0x04, 0x80, 0x50, 0x50, 0x61, 0x01, 0x3e, 0x56, 0x5b, 0x00, 0x5b, 0x61, 0x00, 0x83, 0x60, 0x04, 0x80, 0x80, 0x35, 0x90, 0x60, 0x20, 0x01, 0x90, 0x91, 0x90, 0x50, 0x50, 0x61, 0x01, 0x7d, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x80, 0x82, 0x81, 0x52, 0x60, 0x20, 0x01, 0x91, 0x50, 0x50, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xf3, 0x5b, 0x33, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x61, 0x11, 0x11, 0x60, 0x00, 0x60, 0x00, 0x50, 0x60, 0x00, 0x33, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x90, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x00, 0x20, 0x60, 0x00, 0x50, 0x54, 0x60, 0x40, 0x51, 0x80, 0x90, 0x50, 0x60, 0x00, 0x60, 0x40, 0x51, 0x80, 0x83, 0x03, 0x81, 0x85, 0x88, 0x88, 0xf1, 0x93, 0x50, 0x50, 0x50, 0x50, 0x15, 0x15, 0x61, 0x01, 0x06, 0x57, 0x61, 0x00, 0x02, 0x56, 0x5b, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x50, 0x60, 0x00, 0x33, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x90, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x00, 0x20, 0x60, 0x00, 0x50, 0x81, 0x90, 0x55, 0x50, 0x5b, 0x56, 0x5b, 0x34, 0x60, 0x00, 0x60, 0x00, 0x50, 0x60, 0x00, 0x33, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x90, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x00, 0x20, 0x60, 0x00, 0x82, 0x82, 0x82, 0x50, 0x54, 0x01, 0x92, 0x50, 0x50, 0x81, 0x90, 0x55, 0x50, 0x5b, 0x56, 0x5b, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x50, 0x60, 0x00, 0x83, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x90, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x00, 0x20, 0x60, 0x00, 0x50, 0x54, 0x90, 0x50, 0x61, 0x01, 0xb6, 0x56, 0x5b, 0x91, 0x90, 0x50, 0x56 };
#define VULN_WITHDRAW 0x5FD8C710 // <== VUln
#define VULN_ADDBALANCE 0xC0E317FB
#define VULN_GETBALANCE 0xF8B2CB4F

void debug() {

#if 0
    printf("--------- | SimpleContractBin\n");
    printInstructions(SimpleContractBin);
    printf("--------- | SimpleRunTime\n");
    printInstructions(SimpleRunTime);
    printf("--------- | InitBlockFunctions\n");
    printInstructions(InitBlockFunctions);
    printf("--------- | TwoEmptyFunctions\n");
    printInstructions(TwoEmptyFunctions);
    printf("--------- | TwoEmptyFunctionsRuntime\n");
    printInstructions(TwoEmptyFunctionsRuntime);
    printf("--------- | OneEmptyFunctionRunTime\n");
    printInstructions(OneEmptyFunctionRunTime);
    printf("--------- | ThreeFuncMath\n");
#endif

#if 0

#if 1
    Contract reverseMe(ThreeFuncMath);
    reverseMe.setABI("[{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"double\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"triple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}], \"type\":\"function\"}]");
    reverseMe.setData({ 0xee, 0xe9, 0x72, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 });

    if (g_VerboseLevel > 2) reverseMe.printInstructions();

#define TRIPLE_FUNCTION_HASH 0xf40a049d
#define DOUBLE_FUNCTION_HASH 0xeee97206
    reverseMe.getFunction(DOUBLE_FUNCTION_HASH);
    reverseMe.getFunction(TRIPLE_FUNCTION_HASH);
    // reverseMe.printBlockReferences();
#endif

    printf("---------------------------------------------\n");
    // todo: data()
    Contract addData({ 0x60, 0x60, 0x60, 0x40, 0x52, 0x60, 0xe0, 0x60, 0x02, 0x0a, 0x60, 0x00, 0x35, 0x04, 0x63, 0x73, 0xd4, 0xa1, 0x3a, 0x81, 0x14, 0x60, 0x24, 0x57, 0x80, 0x63, 0xe5, 0xd8, 0x24, 0xa7, 0x14, 0x60, 0x2c, 0x57, 0x5b, 0x00, 0x5b, 0x60, 0x6b, 0x60, 0x00, 0x54, 0x81, 0x56, 0x5b, 0x60, 0x22, 0x60, 0x04, 0x35, 0x33, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x73, 0x69, 0x2a, 0x70, 0xd2, 0xe4, 0x24, 0xa5, 0x6d, 0x2c, 0x6c, 0x27, 0xaa, 0x97, 0xd1, 0xa8, 0x63, 0x95, 0x87, 0x7b, 0x3a, 0x14, 0x15, 0x60, 0x68, 0x57, 0x60, 0x00, 0x81, 0x90, 0x55, 0x5b, 0x50, 0x56, 0x5b, 0x60, 0x60, 0x90, 0x81, 0x52, 0x60, 0x20, 0x90, 0xf3 });
    if (g_VerboseLevel > 2) addData.printInstructions();
    addData.setABI("[{\"constant\":true,\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data_\",\"type\":\"uint256\"}],\"name\":\"addData\",\"outputs\":[],\"type\":\"function\"}]");
    addData.setData({ 0xee, 0xe9, 0x72, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 });
    addData.getFunction(0xe5d824a7);
    printf("Expected result:\n");
    printf("contract Data {\n"
        "    uint public data;\n"
        "    function addData(uint data_) {\n"
        "        if (msg.sender == 0x692a70d2e424a56d2c6c27aa97d1a86395877b3a)\n"
        "        data = data_; \n"
        "    }\n"
        "}\n");
    // emulateInstructions(EmptyContract);
#endif

#if 0
    606060405260e060020a600035046307546172811461003c57806327e235e31461004e57806340c10f1914610066578063d0679d341461008c575b00
        5b6100bb600054600160a060020a031681565b6100bb60043560016020526000908152604090205481565b61003a600435602435600054600160a060
        020a039081163391909116146100c5576100e4565b61003a600435602435600160a060020a0333166000908152600160205260409020548190101561
        00e8576100e4565b6060908152602090f35b600160a060020a03821660009081526001602052604090208054820190555b5050565b60406000818120
        80548490039055600160a060020a03808516808352929091208054840190553316606090815260809190915260a08290527f3990db2d31862302a685
        e8086b5755072a6e2b5b780af1ee81ece35ee3cd33459080a1505056
        Function signatures :
    07546172 : minter()
        27e235e3 : balances(address)
        40c10f19 : mint(address, uint256)
        d0679d34 : send(address, uint256)
        Contract JSON ABI
        [{"constant":true, "inputs" : [], "name" : "minter", "outputs" : [{"name":"", "type" : "address"}], "type" : "function"}, { "constant":tr
        ue,"inputs" : [{"name":"","type" : "address"}],"name" : "balances","outputs" : [{"name":"","type" : "uint256"}],"type" : "function" }
        , { "constant":false,"inputs" : [{"name":"receiver","type" : "address"},{ "name":"amount","type" : "uint256" }],"name" : "mint","out \
        puts":[],"type":"function"},{"constant":false,"inputs":[{"name":"receiver","type":"address"},{"name":"amount","type":"ui \
        nt256"}],"name":"send","outputs":[],"type":"function"},{"inputs":[],"type":"constructor"},{"anonymous":false,"inputs":[{ \
        "indexed" : false,"name" : "from","type" : "address" }, { "indexed":false,"name" : "to","type" : "address" }, { "indexed":false,"name" : " \
        amount","type":"uint256"}],"name":"Sent","type":"event"}]
#endif

#if 1
        Contract Coin({ 0x60, 0x60, 0x60, 0x40, 0x52, 0x60, 0xe0, 0x60, 0x02, 0x0a, 0x60, 0x00, 0x35, 0x04, 0x63, 0x07, 0x54, 0x61, 0x72, 0x81, 0x14, 0x61, 0x00, 0x3c, 0x57, 0x80, 0x63, 0x27, 0xe2, 0x35, 0xe3, 0x14, 0x61, 0x00, 0x4e, 0x57, 0x80, 0x63, 0x40, 0xc1, 0x0f, 0x19, 0x14, 0x61, 0x00, 0x66, 0x57, 0x80, 0x63, 0xd0, 0x67, 0x9d, 0x34, 0x14, 0x61, 0x00, 0x8c, 0x57, 0x5b, 0x00, 0x5b, 0x61, 0x00, 0xbb, 0x60, 0x00, 0x54, 0x60, 0x01, 0x60, 0xa0, 0x60, 0x02, 0x0a, 0x03, 0x16, 0x81, 0x56, 0x5b, 0x61, 0x00, 0xbb, 0x60, 0x04, 0x35, 0x60, 0x01, 0x60, 0x20, 0x52, 0x60, 0x00, 0x90, 0x81, 0x52, 0x60, 0x40, 0x90, 0x20, 0x54, 0x81, 0x56, 0x5b, 0x61, 0x00, 0x3a, 0x60, 0x04, 0x35, 0x60, 0x24, 0x35, 0x60, 0x00, 0x54, 0x60, 0x01, 0x60, 0xa0, 0x60, 0x02, 0x0a, 0x03, 0x90, 0x81, 0x16, 0x33, 0x91, 0x90, 0x91, 0x16, 0x14, 0x61, 0x00, 0xc5, 0x57, 0x61, 0x00, 0xe4, 0x56, 0x5b, 0x61, 0x00, 0x3a, 0x60, 0x04, 0x35, 0x60, 0x24, 0x35, 0x60, 0x01, 0x60, 0xa0, 0x60, 0x02, 0x0a, 0x03, 0x33, 0x16, 0x60, 0x00, 0x90, 0x81, 0x52, 0x60, 0x01, 0x60, 0x20, 0x52, 0x60, 0x40, 0x90, 0x20, 0x54, 0x81, 0x90, 0x10, 0x15, 0x61, 0x00, 0xe8, 0x57, 0x61, 0x00, 0xe4, 0x56, 0x5b, 0x60, 0x60, 0x90, 0x81, 0x52, 0x60, 0x20, 0x90, 0xf3, 0x5b, 0x60, 0x01, 0x60, 0xa0, 0x60, 0x02, 0x0a, 0x03, 0x82, 0x16, 0x60, 0x00, 0x90, 0x81, 0x52, 0x60, 0x01, 0x60, 0x20, 0x52, 0x60, 0x40, 0x90, 0x20, 0x80, 0x54, 0x82, 0x01, 0x90, 0x55, 0x5b, 0x50, 0x50, 0x56, 0x5b, 0x60, 0x40, 0x60, 0x00, 0x81, 0x81, 0x20, 0x80, 0x54, 0x84, 0x90, 0x03, 0x90, 0x55, 0x60, 0x01, 0x60, 0xa0, 0x60, 0x02, 0x0a, 0x03, 0x80, 0x85, 0x16, 0x80, 0x83, 0x52, 0x92, 0x90, 0x91, 0x20, 0x80, 0x54, 0x84, 0x01, 0x90, 0x55, 0x33, 0x16, 0x60, 0x60, 0x90, 0x81, 0x52, 0x60, 0x80, 0x91, 0x90, 0x91, 0x52, 0x60, 0xa0, 0x82, 0x90, 0x52, 0x7f, 0x39, 0x90, 0xdb, 0x2d, 0x31, 0x86, 0x23, 0x02, 0xa6, 0x85, 0xe8, 0x08, 0x6b, 0x57, 0x55, 0x07, 0x2a, 0x6e, 0x2b, 0x5b, 0x78, 0x0a, 0xf1, 0xee, 0x81, 0xec, 0xe3, 0x5e, 0xe3, 0xcd, 0x33, 0x45, 0x90, 0x80, 0xa1, 0x50, 0x50, 0x56 });
    //  .\solc.exe --bin-runtime --optimize E:\eth\simple.sol --abi --hashes
    if (g_VerboseLevel > 2) Coin.printInstructions();
    Coin.setABI(string(""), "[{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sent\",\"type\":\"event\"}]");
    Coin.setData({ 0xee, 0xe9, 0x72, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 });
    //Coin.printInstructions();
    //printf("%s\n", Coin.getGraphviz(false).c_str());


    Coin.decompile(0x40c10f19); // mint()
    Coin.decompile(0xd0679d34); // send()
    Coin.decompile(0x27E235E3); // balances()
    Coin.decompile(0x07546172); // minter()
#if 0
    Coin.getFunction(0x27E235E3); // balances()
    Coin.getFunction(0x07546172); // minter()

    printf("---\n");

    Coin.getFunction(0x40c10f19); // mint()
    Coin.getFunction(0xd0679d34); // send()

    Coin.forEachFunction([&](uint32_t _hash) {
        printf("Hash: 0x%08X\n", _hash);
        Coin.getFunction(_hash);
    });
#endif

#endif

#if 1
    Contract reverseMe(ThreeFuncMath);
    reverseMe.setABI("", "[{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"double\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"triple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}], \"type\":\"function\"}]");
    reverseMe.setData({ 0xee, 0xe9, 0x72, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 });
    if (g_VerboseLevel > 2)
    {
        reverseMe.printInstructions();

        printf("==================================\n");
        printf("%s\n", reverseMe.getGraphviz(false).c_str());
        printf("==================================\n");
    }
#define TRIPLE_FUNCTION_HASH 0xf40a049d
#define DOUBLE_FUNCTION_HASH 0xeee97206
    reverseMe.decompile(DOUBLE_FUNCTION_HASH);
    printf("------------\n");
    reverseMe.decompile(TRIPLE_FUNCTION_HASH);

    printf("After execution.\n%s\n", reverseMe.getGraphviz(false).c_str());
#endif

    Contract vulnerable(VulnerableContract);
    vulnerable.setABI("", "[{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"n"
        "ame\":\"addToBalance\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"u\",\"type\":\"address\"}],\"name\":\"ge"
        "tBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"}]");
    vulnerable.setData({ 0xee, 0xe9, 0x72, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 });
    vulnerable.decompile(VULN_WITHDRAW);
    vulnerable.decompile(VULN_GETBALANCE);
    vulnerable.decompile(VULN_ADDBALANCE);
}
